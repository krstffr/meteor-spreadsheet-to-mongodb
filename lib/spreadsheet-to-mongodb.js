SpreadsheetToMongoDB = function ( options ) {

	var that = this;
	that.options = options;

	// CSS classes
	that.cssClassesMain = 'SpreadsheetToMongoDB';
	that.cssClasses = {
		form: that.cssClassesMain +	'__form',
		textarea: that.cssClassesMain +	'__form__textarea'
	};

	// Method for hashing strings
	that.hashCode = function( str ) {
		var hash = 0, i, chr, len;
		if (str.length === 0) return hash;
		for (i = 0, len = str.length; i < len; i++) {
			chr   = str.charCodeAt(i);
			hash  = ((hash << 5) - hash) + chr;
			hash |= 0;
		}
		return hash;
	};


	// Client methods
	if (Meteor.isClient) {

		that.getTextarea = function ( formName, options ) {

			var currentForm = that.getCurrentForm( formName );

			// This is for temporarily putting the generated HTML in
			var HTMLwrapper = $('<div />');

			// The form
			var HTMLform = $('<form />')
			.attr('data-spreadsheet-to-mongodb-name', formName)
			.addClass(that.cssClasses.form);

			// The textarea
			var HTMLtextarea = $('<textarea />')
			.addClass(that.cssClasses.textarea);

			// The save button
			var HTMLsaveButton = $('<input />')
			.val('Save')
			.attr('type', 'submit');

			HTMLform.append( HTMLtextarea, HTMLsaveButton );

			// If the user wants to show the schema, do it
			if (options && options.showSchema) {

				// The provided field names which the user has set for this form
				var fieldNames = _( currentForm.fields ).pluck('name');

				// A "headline" for the textarea describing the "schema" of the input
				var HTMLheadline = $('<p />')
				.text( fieldNames.toString().replace(/,/g, ' | ') );

				HTMLform.prepend( HTMLheadline );

			}

			HTMLwrapper.append(HTMLform);

			return HTMLwrapper.html();

		};

		// Get the current form from .optios (based on name)
		that.getCurrentForm = function ( formName ) {

			var currentForm = _(that.options).findWhere({ name: formName });
			if (!currentForm)
				throw new Error('You\'re trying to get a form which does not exist: '+name);
			return currentForm;

		};

		that.submitForm = function ( input, formName ) {

			// Get the form passed to options based on name
			var currentForm = that.getCurrentForm( name );

			// Fix up input data
			input = '"'+input;										// First line
			input = input.replace(/	/g, '"	"');	// Place qoutes before and after tabs
			input = input.replace(/\n/g, '"\n"');	// Place quotes on end line (and start of the next)
			input = input.replace(/ "/g, '"');		// Remove trailing spaces
			input = input.replace(/	/g, ',');			// Replace all tabs with commas

			// Get the header row.
			var header = _(currentForm.fields).pluck('name');

			// Add header-row
			input = header.toString() + '\n' + input;

			var inputAsArray = $.csv.toObjects(input);

			// Get the idpart, number, date, required fields and fields with default values
			var _idFields = _.where(currentForm.fields, { idpart: true });
			var numberFields = _(_.where(currentForm.fields, { type: 'number' })).pluck('name');
			var dateFields = _(_.where(currentForm.fields, { type: 'date' })).pluck('name');
			var requiredFields = _.where(currentForm.fields, { required: true });

			var fieldsWithDefaultValues = _.compact( _.map(currentForm.fields, function ( field ) {
				if ( _.has(field, 'defaultValue') ) return field;
			}) );

			inputAsArray = _(inputAsArray).map( function( inputRow ) {

				// Make sure all required fields are set
				_.each(requiredFields, function(requiredField) {
					if (!inputRow[ requiredField.name ]) {
						throw new Error('Required field not set: ' + requiredField.name + '. See passed doc in the row above.');
					}
				});

				// Set default values for unset values
				_.each(fieldsWithDefaultValues, function( fieldWithDefaultValue ) {
					if( !inputRow[ fieldWithDefaultValue.name ] )
						inputRow[ fieldWithDefaultValue.name ] = fieldWithDefaultValue.defaultValue;
				});

				// Generate an _id if there are _idFields set by the user
				_.each(_idFields, function(_idField) {
					inputRow._id += inputRow[ _idField.name ];
				});

				// Hash the _id and remove whitespaces (if the _id is generated by the users _idFields )
				if (inputRow._id && _idFields.length > 0)
					inputRow._id = that.hashCode( inputRow._id.replace(/ /g, '') );

				// If there is no _id set from _idFields (or explicitly by 
				// setting { _id: 'something' }), generate one!
				if (!inputRow._id)
					inputRow._id = Meteor.uuid();

				// Add the userId to the _id if user set addUserIdToId to options
				if (currentForm.addUserIdToId)
					inputRow._id += Meteor.userId().substr(0,10);

				// Remove all values which have the REMOVE key
				inputRow = _(inputRow).omit('REMOVE');

				// Make sure numbers are numbers
				_.each(numberFields, function(numberFieldName) {
					if (inputRow[numberFieldName])
						inputRow[numberFieldName] = parseFloat( inputRow[numberFieldName] );
				});

				// Make sure dates are dates
				_.each(dateFields, function(dateFieldName) {
					if (inputRow[dateFieldName])
						inputRow[dateFieldName] = new Date( inputRow[dateFieldName] );
				});

				return inputRow;

			});

			Meteor.call('SpreadsheetToMongoDB/save', inputAsArray, formName, function (error, result) {
				if (error)
					console.log(error);
			});

		};

		that.setupFormEvents = function () {
			
			// First unattach any previously bound events
			$('body').off('submit', '.'+that.cssClasses.form);

			// Now bind the new one.
			$('body').on('submit', '.'+that.cssClasses.form, function ( event ) {

				event.preventDefault();
				
				var formInput = $(this).find('.'+that.cssClasses.textarea).val();
				var formName = $(this).data('spreadsheet-to-mongodb-name');

				that.submitForm( formInput, formName );

				return false;

			});

		};

		that.init = function () {

			Meteor.startup(function () {
				that.setupFormEvents();
			});

		};

		this.init();

	}

	// Server methods
	if (Meteor.isServer) {

	}

};